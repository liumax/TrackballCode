%This is the Matlab Script

%Holy cow this is working

global scQtUserData;
          
% UI prompt:
prompt = {'Mouse ID:',...  1
    'Min Reward (msec):',...       2
    'Max Reward (msec):',...       3
    'Reward Prob:',...      4
    'Laser Prob:',...       5
    'Blocks:',...           6
    'Block Size:',...       7
    'Tone/Hi Rew? 1 for yes',...          8
    'Weight:',...           9
    'sessionID:',...        10
    'Notes:'}; %the bracket is to end the prompt     11
dlg_title = 'LickTask:';
num_lines=1;
def={'','80','250','0.9','0','1','5','1','','1',''};
answer = inputdlg(prompt,dlg_title,num_lines,def);
pause(2); % need to pause for microcontroller or things break!

% Connect to Microcontroller and store MetaData:
% setComVal; % Call script to set com port string for this computer
% sHandle = scConnect(comValStr,@pokeE_Callback);
% pause(1);

minITI=7000;
maxITI=13000;
minWater=2000;
maxWater=3000;
soundDur=3000;

i=1;
t = clock;
rand('seed',sum(round(clock)));
scQtUserData.mouseID = answer{i};i=i+1;
scQtUserData.minRew = str2double(answer{i});i=i+1;
scQtUserData.maxRew = str2double(answer{i});i=i+1;
scQtUserData.rewProb = str2double(answer{i});i=i+1;
scQtUserData.laserProb = str2double(answer{i});i=i+1;
scQtUserData.blocks = str2double(answer{i});i=i+1;
scQtUserData.blockSize = str2double(answer{i});i=i+1;
scQtUserData.toneSide = str2double(answer{i});i=i+1;
scQtUserData.weight = answer{i};i=i+1;
scQtUserData.taskID = 'LickTask';
scQtUserData.sessionID = answer{i};i=i+1;
scQtUserData.notes = answer{i};i=i+1;
scQtUserData.maxITI=maxITI;
scQtUserData.minITI=minITI;
scQtUserData.maxWater=maxWater;
scQtUserData.minWater=minWater;
scQtUserData.soundDur=soundDur;
scQtUserData.date = date;
scQtUserData.time = strcat(num2str(t(4)),':',num2str(t(5)));


% my additional fields:
scQtUserData.trial = 0; % keep track of trial number
% scQtUserData.trInit = false;
% scQtUserData.trBait = false;

pause(0.2);

sendScQtControlMessage(['disp(''Mouse ID:', scQtUserData.mouseID,''')']);
sendScQtControlMessage(['disp(''minRew:', scQtUserData.minRew,''')']);
sendScQtControlMessage(['disp(''maxRew:', scQtUserData.maxRew,''')']);
sendScQtControlMessage(['disp(''rewProb:', scQtUserData.rewProb,''')']);
sendScQtControlMessage(['disp(''laserProb:', scQtUserData.rewProb,''')']);
sendScQtControlMessage(['disp(''blocks:', scQtUserData.blocks,''')']);
sendScQtControlMessage(['disp(''blockSize:', scQtUserData.blockSize,''')']);
sendScQtControlMessage(['disp(''minITI:', scQtUserData.minITI,''')']);
sendScQtControlMessage(['disp(''maxITI:', scQtUserData.maxITI,''')']);
sendScQtControlMessage(['disp(''min Water delay:', scQtUserData.minWater,''')']);
sendScQtControlMessage(['disp(''max Water delay:', scQtUserData.maxWater,''')']);
sendScQtControlMessage(['disp(''toneSide:', scQtUserData.toneSide,''')']);
sendScQtControlMessage(['disp(''weight:', scQtUserData.weight,''')']);
sendScQtControlMessage(['disp(''taskID:', scQtUserData.taskID,''')']);
sendScQtControlMessage(['disp(''date:', scQtUserData.date,''')']);
sendScQtControlMessage(['disp(''time:', scQtUserData.time,''')']);
sendScQtControlMessage(['disp(''sessionID:', scQtUserData.sessionID,''')']);
sendScQtControlMessage(['disp(''notes:', scQtUserData.notes,''')']);

pause(1) %Need to put all my timings in before this stuff

triallength=scQtUserData.blocks*scQtUserData.blockSize;

%master array for all calculations
master=zeros(triallength,0);

%master(:,1) determines reward size. fills in rewards sizes so can pull by
%trial number
master(:,1)=scQtUserData.minRew;
for x=2:2:scQtUserData.blocks
    master(1+(x-1)*scQtUserData.blockSize:x*scQtUserData.blockSize,1)=scQtUserData.maxRew;
end

%master(:,3) will implement an exponential for the ITI distribution, with
%random noise inserted.

k = 2.5;
p = (1-exp(-k))*rand(triallength,1);
tau = (maxITI-minITI)/k;
x = round(minITI + (-log(1-p))*tau); 
master(:,3)= x;

%master(:,4) will calculate delay time from tone presentation. Will use
%flat distribution utilizing random numbers.

delayRatio=maxWater-minWater;
master(:,4)=round(minWater+(rand(triallength,1)*delayRatio));

%master(:,5) calculates if reward is delivered; 1 means delivery, 0 means
%none.

master(:,5)=rand(triallength,1);
master(master(:,5)>=scQtUserData.rewProb,5)=0;
master(master(:,5)<scQtUserData.rewProb,5)=1;

%master(:,6) determines probability of laser; 1 means delivery, 0 means
%none.

master(:,6)=rand(triallength,1);
master(master(:,6)>=scQtUserData.rewProb,5)=0;
master(master(:,6)<scQtUserData.rewProb,5)=1;

scQtUserData.master=master;

for trialNum=1:triallength
    sendScQtControlMessage(['disp(''Trial ', num2str(trialNum),''')']);
    sendScQtControlMessage(['soundRewDel=',num2str(scQtUserData.master(trialNum,4))]);
%     sendScQtControlMessage(['baitDur=',num2str(scQtUserData.soundDur-scQtUserData.master(trialNum,4)+100)]);
%     %bait duration hard set to 500 ms
    sendScQtControlMessage(['rewLength=',num2str(scQtUserData.master(trialNum,1))]);

    pause(scQtUserData.master(trialNum,3)/1000)
    sendScQtControlMessage('trigger(1)');

    
end


% % sendScQtControlMessage('disp(''Init session'')');
